from uuid import uuid4
from sqlalchemy import Column, Boolean, UUID, String, DateTime

from app.db.base import Base
from app.services.password import pwd_context


class Client(Base):
    """
    Represents a client entity in the database.

    Attributes:
        uuid (UUID): The unique identifier for the client, generated by default using `uuid4`.
        username (str): The username of the client. Must be unique and is indexed for faster lookups.
        hashed_password (str): The hashed password of the client.
        ip_address (str): The IP address of the client.
        hostname (str): The hostname of the client. Optional.
        alive (bool): Indicates whether the client is currently active. Defaults to False.
        last_contact (datetime): The timestamp of the last contact with the client. Optional.
        last_known_location (str): The last known location of the client. Optional.
        client_version (str): The version of the client software. This field is required.
    """
    __tablename__ = "clients"
    uuid = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    username = Column(String, nullable=False, unique=True, index=True)
    hashed_password = Column(String, nullable=False)
    ip_address = Column(String, nullable=False)
    hostname = Column(String)
    alive = Column(Boolean, nullable=False, default=False)
    last_contact = Column(DateTime)
    last_known_location = Column(String)
    client_version = Column(String, nullable=False)

    def verify_password(self, password: str) -> bool:
        """
        Verify if the provided password matches the stored hashed password.

        Args:
            password (str): The plain text password to verify.

        Returns:
            bool: True if the password matches, False otherwise.
        """
        return pwd_context.verify(password, self.hashed_password)
