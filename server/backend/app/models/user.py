from datetime import datetime, UTC

from sqlalchemy import Column, Boolean, UUID, String, DateTime
from uuid import uuid4

from app.db.base import Base
from app.services.password import pwd_context


class User(Base):
    """
    User model representing application users in the database.

    Attributes:
        uuid (UUID): The unique identifier for the user, generated by default using `uuid4`.
        username (str): The username of the user. Must be unique and is indexed for faster lookups.
        hashed_password (str): The securely hashed password of the user.
        is_admin (bool): Flag indicating whether the user has administrative privileges. Defaults to False.
        last_login (datetime): The timestamp of the last login for the user. Defaults to the current UTC time
        created_at (datetime): The timestamp when the user account was created. Defaults to the current UTC time
    """

    __tablename__ = "users"

    uuid = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    username = Column(String, nullable=False, unique=True, index=True)
    hashed_password = Column(String, nullable=False)
    is_admin = Column(Boolean, nullable=False, default=False)
    last_login = Column(DateTime, nullable=False, default=lambda : datetime.now(UTC).replace(tzinfo=None))
    created_at = Column(DateTime, nullable=False, default=lambda : datetime.now(UTC).replace(tzinfo=None))

    def verify_password(self, password: str) -> bool:
        """
        Verify if the provided password matches the stored hashed password.

        Args:
            password (str): The plain text password to verify.

        Returns:
            bool: True if the password matches, False otherwise.
        """
        return pwd_context.verify(password, self.hashed_password)
